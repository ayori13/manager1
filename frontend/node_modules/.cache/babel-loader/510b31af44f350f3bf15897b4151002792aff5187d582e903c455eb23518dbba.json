{"ast":null,"code":"const THEME_KEY = 'appTheme';\nexport function applyTheme(theme) {\n  document.body.className = '';\n  document.body.classList.add(`${theme}-theme`);\n  console.log(`Applied theme: ${theme}`);\n}\nexport function loadThemePreference() {\n  return localStorage.getItem(THEME_KEY) || 'light';\n}\nexport function saveThemePreference(theme) {\n  localStorage.setItem(THEME_KEY, theme);\n}\nconst themeSlice = {\n  initialState: {\n    theme: loadThemePreference()\n  },\n  mutations: {\n    SET_THEME(state, theme) {\n      state.theme = theme;\n      console.log('Mutation (theme): SET_THEME', theme);\n      applyTheme(theme);\n      saveThemePreference(theme);\n    }\n  },\n  actions: {\n    toggleTheme(ctx) {\n      console.log('Action (theme): toggleTheme triggered');\n      const newTheme = ctx.state.theme === 'light' ? 'dark' : 'light';\n      ctx.commit('SET_THEME', newTheme);\n    },\n    initializeTheme(ctx) {\n      console.log('Action (theme): initializeTheme triggered');\n      applyTheme(ctx.state.theme);\n    }\n  }\n};\nexport default themeSlice;","map":{"version":3,"names":["THEME_KEY","applyTheme","theme","document","body","className","classList","add","console","log","loadThemePreference","localStorage","getItem","saveThemePreference","setItem","themeSlice","initialState","mutations","SET_THEME","state","actions","toggleTheme","ctx","newTheme","commit","initializeTheme"],"sources":["D:/to-do/frontend/src/features/theme/themeSlice.js"],"sourcesContent":["const THEME_KEY = 'appTheme';\r\n\r\nexport function applyTheme(theme) {\r\n    document.body.className = ''; \r\n    document.body.classList.add(`${theme}-theme`);\r\n    console.log(`Applied theme: ${theme}`);\r\n}\r\n\r\nexport function loadThemePreference() {\r\n    return localStorage.getItem(THEME_KEY) || 'light';\r\n}\r\n\r\nexport function saveThemePreference(theme) {\r\n    localStorage.setItem(THEME_KEY, theme);\r\n}\r\n\r\nconst themeSlice = {\r\n    initialState: {\r\n        theme: loadThemePreference(),\r\n    },\r\n    mutations: {\r\n        SET_THEME(state, theme) {\r\n            state.theme = theme;\r\n            console.log('Mutation (theme): SET_THEME', theme);\r\n            \r\n            applyTheme(theme);\r\n            saveThemePreference(theme);\r\n        },\r\n    },\r\n    actions: {\r\n        toggleTheme(ctx) {\r\n            console.log('Action (theme): toggleTheme triggered');\r\n            const newTheme = ctx.state.theme === 'light' ? 'dark' : 'light';\r\n            ctx.commit('SET_THEME', newTheme);\r\n        },\r\n\r\n        initializeTheme(ctx) {\r\n            console.log('Action (theme): initializeTheme triggered');\r\n            applyTheme(ctx.state.theme);\r\n        }\r\n    }\r\n};\r\n\r\nexport default themeSlice;\r\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG,UAAU;AAE5B,OAAO,SAASC,UAAUA,CAACC,KAAK,EAAE;EAC9BC,QAAQ,CAACC,IAAI,CAACC,SAAS,GAAG,EAAE;EAC5BF,QAAQ,CAACC,IAAI,CAACE,SAAS,CAACC,GAAG,CAAC,GAAGL,KAAK,QAAQ,CAAC;EAC7CM,OAAO,CAACC,GAAG,CAAC,kBAAkBP,KAAK,EAAE,CAAC;AAC1C;AAEA,OAAO,SAASQ,mBAAmBA,CAAA,EAAG;EAClC,OAAOC,YAAY,CAACC,OAAO,CAACZ,SAAS,CAAC,IAAI,OAAO;AACrD;AAEA,OAAO,SAASa,mBAAmBA,CAACX,KAAK,EAAE;EACvCS,YAAY,CAACG,OAAO,CAACd,SAAS,EAAEE,KAAK,CAAC;AAC1C;AAEA,MAAMa,UAAU,GAAG;EACfC,YAAY,EAAE;IACVd,KAAK,EAAEQ,mBAAmB,CAAC;EAC/B,CAAC;EACDO,SAAS,EAAE;IACPC,SAASA,CAACC,KAAK,EAAEjB,KAAK,EAAE;MACpBiB,KAAK,CAACjB,KAAK,GAAGA,KAAK;MACnBM,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEP,KAAK,CAAC;MAEjDD,UAAU,CAACC,KAAK,CAAC;MACjBW,mBAAmB,CAACX,KAAK,CAAC;IAC9B;EACJ,CAAC;EACDkB,OAAO,EAAE;IACLC,WAAWA,CAACC,GAAG,EAAE;MACbd,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;MACpD,MAAMc,QAAQ,GAAGD,GAAG,CAACH,KAAK,CAACjB,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;MAC/DoB,GAAG,CAACE,MAAM,CAAC,WAAW,EAAED,QAAQ,CAAC;IACrC,CAAC;IAEDE,eAAeA,CAACH,GAAG,EAAE;MACjBd,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;MACxDR,UAAU,CAACqB,GAAG,CAACH,KAAK,CAACjB,KAAK,CAAC;IAC/B;EACJ;AACJ,CAAC;AAED,eAAea,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}